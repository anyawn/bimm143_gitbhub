---
title: "Class 5: Data Visualization with ggplot"
author: "Ayanna Kerr (PID: A17143404)"
format: pdf
toc: true
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphic packages in the planet.

There are many plotting systems in R. These include so-called *"base"* plotting/graphics.

```{r}
plot(cars)
```

Base plot is generally rarger short code and somewhat dull plots - but it is always there for you and is fast for big datasets.

If I want to use \*ggplot2\*\* it takes some more work.

```{r}
# ggplot(cars)
```

I need to install the package first to my computer. To do this I can use the function 'install.packages(ggplot2)'

Every time I want to use a package, I need to load it up with a 'library()' call


```{r}
# install.packages(ggplot2)
library(ggplot2)
```


Now I finally can use ggplot

```{r}
ggplot(cars)
```

Every ggplot has at least 3 things: 

- **data** (the data.frame with the data you want to plot)
- **aes** (the aesthetic mapping of the data to the plot) 
- **geom** (how do you want the plot to look, pointsm lines, columns)


```{r}
head(cars)
```


```{r}
bp <- ggplot(cars) +
  aes(x = speed, y = dist) +
  geom_point()
```


I want to make a better graph. Let's look at the help function for 'geom_smooth.'


```{r}
bp + geom_smooth(se = FALSE, method = 'lm') + 
  labs(title = "Stopping Distance of Old Cars", 
       x = "Speed (MPH)",
       y = "Distance (ft)",
       captions = "From the cars dataset") +
  theme_bw()
```


## A more complicated scatterplot

Here we make a plot of gene expression data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
```

```{r}
head(genes)
```

```{r}
nrow(genes)
ncol(genes)
table(genes$State == "up")
```


```{r}
round( sum(genes$State == "up") / nrow(genes) * 100, 2)
```


```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.percent <- n.up/n.gene * 100
round(up.percent,2)
```


```{r}
head(genes,2)
```

```{r}
p <- ggplot(genes) +
  aes( x = Condition1, y = Condition2, col = State) +
  geom_point()
```


```{r}
p + labs(title = "Gene Expression Changes on Drug Treatment", 
        x = "Control (no drug)",
        y = "Treated (drug)") +
  scale_colour_manual( values=c("blue","gray","red"))
```

## Exploring the gapmider dataset

Here we will load up the gapminder datatset to get practice with different aes mappings

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

> Q. How many entries rows are in this dataset?

```{r}
nrow(gapminder)
```


> Q. How many columns?


```{r}
ncol(gapminder)
```


```{r}
head(gapminder)
```


```{r}
table(gapminder$year)
```


> Q. How many continents?


```{r}
table(gapminder$continent)
```


I could use the 'unique()' function...


```{r}
length(unique(gapminder$continent))
```


> Q. How many countries?


```{r}
length(unique(gapminder$country))
```


```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha = 0.2)
```


```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, col = continent, size = pop) +
  geom_point(alpha = 0.5)
# Color in aes if you want to color by specific continents/categories. Color in geom_point if you want just a color for everything. 
```


```{r}
library(dplyr)
gapminder_2007 <- filter(gapminder, year == 2007)
head(gapminder_2007)
```


Plot of 2007 with population and continent data

```{r}
ggplot(gapminder_2007) + 
   aes(x=gdpPercap, y=lifeExp, col = continent, size = pop) +
  geom_point(alpha = 0.5)
```


```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp) +
  geom_point() + 
  facet_wrap(~continent)

```








