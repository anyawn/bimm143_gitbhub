---
title: "Class 13: RNASeq"
author: "Ayanna Kerr (PID: A17143404)"
format: pdf
---

The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects. 

## Import Data

We need two things for thus analysis: counts and metadata. These are called "countData" and "colData" in the DESeq2 world. 

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

The counts are organized with a gene per row and experiment per column. 

```{r}
head(metadata)
```


### Check on match of metadata and coldata

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

If you want to know that all the elements of the vector are TRUE, we can use the 'all()' function.

```{r}
all(colnames(counts) == metadata$id)
```


## Examine Data

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```

```{r}
table(metadata$dex)
```


## Analysis 

I want to start by comparing "control" and "treated" as columns. To this, I will find the average for each gene (row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them. 

Let's extract all "control" columns first.

```{r}
control.inds <- metadata$dex == "control"
```


```{r}
control.counts <- counts[,control.inds]
```

Find the mean count value per gene using the 'apply()' function. 

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" column. Find 'treated.mean'.

```{r}
treated.inds <- metadata$dex == "treated"
```

```{r}
treated.counts <- counts[,treated.inds]
```

```{r}
treated.mean <- apply(treated.counts, 1, mean)
```

Put these two means vectors together for ease of book-keeping. 

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a look with a quick plot.

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log = "xy")
```

```{r}
log(10,base=2)
```

```{r}
log2(10/10)
```

```{r}
log2(20/10)
```

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

We most often work in log2 units because they have a more simple interpretation. 

Here we calculate the log2 Fold-change of treated/control values and add it to our data frame of results. 

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

There are some funky answers in here like NaN (not a number) and -Inf (minus infinity) that all come because I have zero count genes in my dataset. 

It is common practice to filter these zero count genes out before we go too deep. 

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) == 0)
mycounts <- meancounts[to.keep.inds,]
head(mycounts)
```

> Q. How many genes do we have left after zero count filtering? 

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2 fold change of +2 or -2. 

> Q. How many "up" regulated genes do we have?

```{r}
sum(mycounts$log2fc >= +2)
```

## DESeq Analysis

We need to do this analysis properly with our inner stats person kept happy. 

```{r}
#| message: false
library(DESeq2)
```


To use DESeq, we need to get our input data in a very particular format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run DESeq analysis

```{r}
dds <- DESeq(dds)
```
Get results. 
```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date. A plot of **log2 fold chang**e vs the **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, res$padj)
```


```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="gray")
abline(v=2, col="gray")
abline(h=-log(0.05), col="darkgray", lty =2)

mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
```


























